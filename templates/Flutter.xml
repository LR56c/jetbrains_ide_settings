<templateSet group="Flutter">
  <template name="showDialog" value="showDialog&lt;void&gt;(&#10;  context: $context$,&#10;  barrierDismissible: $dismiss$, // false = user must tap button, true = tap outside dialog&#10;  builder: (BuildContext dialogContext){&#10;    return AlertDialog(&#10;      title: Text('$title$'),&#10;      content: Text('$content$'),&#10;      actions: [&#10;        FlatButton(&#10;          child: Text('$buttonText$'),&#10;          onPressed: () {&#10;            Navigator.of(dialogContext).pop(); // Dismiss alert dialog&#10;          },&#10;        ),&#10;      ],&#10;    );&#10;  },&#10;);" description="New AlertDialog" toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="&quot;context&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="dismiss" expression="&quot;barrierDismissible&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="title" expression="&quot;title&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="content" expression="&quot;dialogBody&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="buttonText" expression="&quot;buttonText&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="txt" value="TextButton.icon(&#10;  onPressed: () {&#10;  print(&quot;$ICON$&quot;);&#10;  },&#10;  icon: Icon($ICON$),&#10;  label: Text(&quot;$ICON$&quot;)&#10;)" description="Create TextButton.icon Widget" toReformat="true" toShortenFQNames="true">
    <variable name="ICON" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="customScrollV" value="CustomScrollView(&#10;  slivers: [&#10;    $childWidget1$,&#10;    $childWidget2$,&#10;    $childWidget3$,&#10;  ],&#10;)," description="New CustomScrollView" toReformat="true" toShortenFQNames="true">
    <variable name="childWidget1" expression="&quot;childWidget1&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="childWidget2" expression="&quot;childWidget2&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="childWidget3" expression="&quot;childWidget3&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="layoutBldr" value="LayoutBuilder(&#10;  builder: (BuildContext context, BoxConstraints constraints) {&#10;    return $widget$;&#10;  },&#10;)" description="New LayoutBuilder" toReformat="true" toShortenFQNames="true">
    <variable name="widget" expression="&quot;widget&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="singleChildSV" value="SingleChildScrollView(&#10;  controller: $controller$, // Optional&#10;  child: $widget$,&#10;)" description="New SingleChildScrollView" toReformat="true" toShortenFQNames="true">
    <variable name="controller" expression="&quot;controller&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="widget" expression="&quot;widget&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="listviewBldr" value="ListView.builder(&#10;  itemCount: $COUNT$,&#10;  itemBuilder: (BuildContext context, int index) {&#10;    return $WIDGET$;&#10;  }, &#10;)" description="Create ListView.builder" toReformat="true" toShortenFQNames="true">
    <variable name="COUNT" expression="&quot;count&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="WIDGET" expression="&quot;widget&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="orientationBldr" value="OrientationBuilder(&#10;  builder: (BuildContext context, Orientation orientation) {&#10;    return GridView.count(&#10;    // Create a grid with 2 columns in portrait mode, or 3 columns in&#10;    // landscape mode.&#10;      crossAxisCount: orientation == Orientation.portrait ? 2 : 3,&#10;    );&#10;  },&#10;);" description="New OrientationBuilder" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="container" value="Container(&#10;  child: $Widget$,&#10;)" description="Create Container Widget" toReformat="true" toShortenFQNames="true">
    <variable name="Widget" expression="&quot;Widget&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="row" value="Row(&#10;  children: [&#10;    $goto$&#10;  ],&#10;)" description="Create Row Widget" toReformat="true" toShortenFQNames="true">
    <variable name="goto" expression="&quot;&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="column" value="Column(&#10;  children: [&#10;    $goto$&#10;  ],&#10;)" description="Create Column Widget" toReformat="true" toShortenFQNames="true">
    <variable name="goto" expression="&quot;&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="aspectRatio" value="AspectRatio(&#10;  aspectRatio: $aspectRatio$,&#10;  child: $child$&#10;)," description="New AspectRatio Widget" toReformat="true" toShortenFQNames="true">
    <variable name="aspectRatio" expression="$aspectRatio$" defaultValue="" alwaysStopAt="true" />
    <variable name="child" expression="$child$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="initS" value="@override&#10;void initState() {&#10;  $s$&#10;  super.initState();&#10;}" description="Add initState Override" toReformat="true" toShortenFQNames="true">
    <variable name="s" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="toStr" value="@override&#10;String toString() {&#10;  return $toString$;&#10;}&#10;" description="To String Override" toReformat="true" toShortenFQNames="true">
    <variable name="toString" expression="$toString$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="mounted" value="@override &#10; bool get mounted { &#10;  $body$&#10;}&#10;" description="Mounted" toReformat="true" toShortenFQNames="true">
    <variable name="body" expression="$body$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="nosm" value="@override &#10; dynamic noSuchMethod(Invocation invocation) { &#10;  $body$&#10;}&#10;" description="No Such Method" toReformat="true" toShortenFQNames="true">
    <variable name="body" expression="$body$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="build" value="@override &#10; Widget build(BuildContext context) { &#10;   return $body$; &#10;}&#10;" description="No Such Method" toReformat="true" toShortenFQNames="true">
    <variable name="body" expression="$body$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="tweenAnimationBldr" value="TweenAnimationBuilder( &#10;  duration: $duration$, &#10;  tween: $tween$, &#10;  builder: (BuildContext context, $type$ value, Widget child) { &#10;    return  $body$  &#10;  }&#10;)&#10;" description="Tween Animation Builder" toReformat="true" toShortenFQNames="true">
    <variable name="duration" expression="$duration$" defaultValue="const Duration()" alwaysStopAt="true" />
    <variable name="tween" expression="$tween$" defaultValue="Tween()" alwaysStopAt="true" />
    <variable name="type" expression="$type$" defaultValue="dynamic" alwaysStopAt="true" />
    <variable name="body" expression="$body$" defaultValue="Container();" alwaysStopAt="true" />
    <context />
  </template>
  <template name="btn_flat" value="FlatButton(&#10;  onPressed: () {&#10;    print(&quot;$text$&quot;);&#10;  },&#10;  child: Text(&quot;$text$&quot;)&#10;)&#10;" description="Create FlatButton Widget" toReformat="true" toShortenFQNames="true">
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="btn_flat_icon" value="FlatButton.icon(&#10;  onPressed: () {&#10;    print(&quot;$text$&quot;);&#10;  },&#10;  icon: Icon($text$),&#10;  label: Text(&quot;$text$&quot;)&#10;)&#10;" description="Create FlatButton.icon Widget" toReformat="true" toShortenFQNames="true">
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="btn_raised" value="RaisedButton(&#10;  child: Text(&quot;$text$&quot;),&#10;  onPressed: () {&#10;    print(&quot;$text$&quot;);&#10;  }&#10;)" description="Create RaisedButton Widget" toReformat="true" toShortenFQNames="true">
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="btn_raised_icon" value="RaisedButton.icon(&#10;  onPressed: () {&#10;    print(&quot;$icon$&quot;);&#10;  },&#10;  icon: Icon($icon$),&#10;  label: Text(&quot;$icon$&quot;)&#10;)" description="Create RasiedButton.icon Widget" toReformat="true" toShortenFQNames="true">
    <variable name="icon" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="btn_elevated" value="ElevatedButton(&#10;  child: Text(&quot;$text$&quot;),&#10;  onPressed: () {&#10;    print(&quot;$text$&quot;);&#10;  }&#10;)&#10;" description="Create ElevatedButton Widget" toReformat="true" toShortenFQNames="true">
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="btn_elevated_icon" value="ElevatedButton.icon(&#10;  onPressed: () {&#10;    print(&quot;$icon$&quot;);&#10;  },&#10;  icon: Icon($icon$),&#10;  label: Text(&quot;$icon$&quot;)&#10;)&#10;" description="Create RasiedButton.icon Widget" toReformat="true" toShortenFQNames="true">
    <variable name="icon" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="btn_outline" value="OutlineButton(&#10;  onPressed: () {&#10;    print(&quot;$text$&quot;);&#10;  },&#10;  child: Text(&quot;$text$&quot;),&#10;)" description="Create OutlineButton Widget" toReformat="true" toShortenFQNames="true">
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="btn_outline_icon" value="OutlineButton.icon(&#10;  onPressed: () {&#10;    print(&quot;$icon$&quot;);&#10;  },&#10;  icon: Icon($icon$),&#10;  label: Text(&quot;$icon$&quot;)&#10;)" description="Create RasiedButton.icon Widget" toReformat="true" toShortenFQNames="true">
    <variable name="icon" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="btn_outlined" value="OutlinedButton(&#10;  onPressed: () {&#10;    print(&quot;$text$&quot;);&#10;  },&#10;  child: Text(&quot;$text$&quot;),&#10;)" description="Create OutlinedButton Widget" toReformat="true" toShortenFQNames="true">
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="btn_outlined_icon" value="OutlinedButton.icon(&#10;  onPressed: () {&#10;    print(&quot;$icon$&quot;);&#10;  },&#10;  icon: Icon($icon$),&#10;  label: Text(&quot;$icon$&quot;)&#10;)" description="Create RasiedButton.icon Widget" toReformat="true" toShortenFQNames="true">
    <variable name="icon" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="btn_text" value="TextButton(&#10;  onPressed: () {&#10;    print(&quot;$text$&quot;);&#10;  },&#10;  child: Text(&quot;$text$&quot;)&#10;)" description="Create TextButton Widget" toReformat="true" toShortenFQNames="true">
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="btn_popup" value="Text(&quot;$popupMenuValue&quot;),&#10;  PopupMenuButton(&#10;  onSelected: (value) {&#10;    print(&quot;popup menu button value: $value&quot;);&#10;    setState(() {&#10;      popupMenuValue = value;&#10;      print(&quot;popup menu button value: $value&quot;);&#10;    });&#10;  },&#10;  itemBuilder: (context) =&gt; [&#10;    PopupMenuItem(&#10;      child: Text(&quot;Item1&quot;),&#10;      value: &quot;Item1&quot;,&#10;    ),&#10;    PopupMenuItem(&#10;      child: Text(&quot;Item2&quot;),&#10;      value: &quot;Item2&quot;,&#10;    ),&#10;    PopupMenuItem(&#10;      child: Text(&quot;Item3&quot;),&#10;      value: &quot;Item3&quot;,&#10;    ),&#10;  ],&#10;)" description="Create PopupMenuButton Widget" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="btn_dropdown" value="DropdownButton(&#10;  value: dropdownValue,&#10;  items: [&#10;    DropdownMenuItem(&#10;      child: Text('北京'),&#10;      value: &quot;北京&quot;,&#10;    ),&#10;    DropdownMenuItem(&#10;      child: Text('天津'),&#10;      value: &quot;天津&quot;,&#10;    ),&#10;    DropdownMenuItem(&#10;      child: Text('河北'),&#10;      value: &quot;河北&quot;,&#10;    )&#10;  ],&#10;  onChanged: (value) {&#10;    setState(() {&#10;      dropdownValue = value;&#10;    });&#10;  },&#10;)&#10;  " description="Create DropdownButton Widget" toReformat="false" toShortenFQNames="true">
    <context />
  </template>
  <template name="btn_icon" value="IconButton(&#10;  icon: Icon($icon$),&#10;  onPressed: (){&#10;    print(&quot;$icon$&quot;);&#10;  }&#10;)" description="Create IconButton Widget" toReformat="true" toShortenFQNames="true">
    <variable name="icon" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="fcent" value="Center(&#10;  child: $child$&#10;)$END$" description="New Center widget" toReformat="true" toShortenFQNames="true">
    <variable name="child" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="fcol" value="Column(&#10;  children: [&#10;    $children$&#10;  ],&#10;)$END$" description="New Column widget" toReformat="true" toShortenFQNames="true">
    <variable name="children" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="fcustomscroll" value="CustomScrollView(&#10;  slivers: [&#10;    $childWidget$,&#10;  ],&#10;)$END$" description="New CustomScrollView widget" toReformat="true" toShortenFQNames="true">
    <variable name="childWidget" expression="&quot;childWidget&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="finsym" value="EdgeInsets.symmetric($s$)$END$" description="New EdgeInsets.symmetric vertically widget" toReformat="true" toShortenFQNames="true">
    <variable name="s" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="fexp" value="Expanded(&#10;  child: $child$&#10;)$END$" description="New Expanded widget" toReformat="true" toShortenFQNames="true">
    <variable name="child" expression="&quot;null&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="ficon" value="Icon($iconName$)$END$" description="New Icon widget" toReformat="true" toShortenFQNames="true">
    <variable name="iconName" expression="&quot;clear&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="frow" value="Row(&#10;  children: [&#10;    $children$&#10;  ],&#10;)" description="New Row widget" toReformat="true" toShortenFQNames="true">
    <variable name="children" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rect" value="return Container(&#10;  width: 70,&#10;  height: 70,&#10;  decoration: BoxDecoration(&#10;    color: Colors.blue&#10;  ),&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="flpage" value="import 'package:flutter/material.dart';&#10;class $name$Page extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      body: Center(&#10;        child: Text('$name$Page'),&#10;      ),&#10;    );&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="flscreen" value="import 'package:flutter/material.dart';&#10;class $name$Screen extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      body: Center(&#10;        child: Text('$name$Screen'),&#10;      ),&#10;    );&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="&gt;view" value="import 'package:flutter/material.dart';&#10;class $name$View extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      body: Center(&#10;        child: Text('$name$View'),&#10;      ),&#10;    );&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="&gt;page" value="import 'package:flutter/material.dart';&#10;&#10;class $name$Page extends StatelessWidget {&#10;  const $name$Page({Key key}) : super(key: key);&#10;&#10;  /// $name$Page [routeName]&#10;  static const routeName = '$name$Page';&#10;&#10;  ///Router for $name$Page&#10;  static Route route() {&#10;    return MaterialPageRoute&lt;void&gt;(builder: (_) =&gt; const $name$Page());&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: const Text('$name$'),&#10;      ),&#10;    );&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="imptime" value="import 'package:time/time.dart';" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="fmedqf" value="final size = MediaQuery.of(context).size;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="fmedq" value="MediaQuery.of(context).size;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
</templateSet>