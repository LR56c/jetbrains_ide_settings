<templateSet group="TSReact">
  <template name="i" value="interface $END$ {&#10;}&#10;" description="interface" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="t" value="type $END$ = &#10;" description="type alias" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="efcr" value="export const $NAME$: FC&lt;$typeProps$&gt; = ($END$) =&gt; {&#10;  return (&#10;    &lt;div&gt;$NAME$&lt;/div&gt;&#10;  )&#10;}" description="export fc resume" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="typeProps" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="c" value="export const $NAME$Context = createContext({} as $END$);&#10;const { Provider } = $NAME$Context; // resume only" description="create context" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ch" value="if ( typeof window === 'undefined' ) return" description="check window" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="efcd" value="const $NAME$: FC&lt;$typeProps$&gt; = ($END$) =&gt; {&#10;  return (&#10;    &lt;div&gt;$NAME$&lt;/div&gt;&#10;  )&#10;}&#10;&#10;export default $NAME$ " description="export fc default" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="typeProps" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="nd" value="import Document, {&#10;  DocumentContext,&#10;  Head,&#10;  Html,&#10;  Main,&#10;  NextScript&#10;} from &quot;next/document&quot;&#10;&#10;class MyDocument extends Document&#10;{&#10;  static async getInitialProps( ctx: DocumentContext )&#10;  {&#10;    const initialProps = await Document.getInitialProps( ctx );&#10;    return initialProps;&#10;  }&#10;&#10;  render()&#10;  {&#10;    return (&#10;      &lt;Html&gt;&#10;        &lt;Head&gt;&#10;        &lt;/Head&gt;&#10;        &lt;body&gt;&#10;        &lt;Main/&gt;&#10;        &lt;NextScript/&gt;&#10;        &lt;/body&gt;&#10;      &lt;/Html&gt;&#10;    )&#10;  }&#10;}&#10;&#10;export default MyDocument;" description="next document" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>